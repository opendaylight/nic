/*
 * Copyright 2016-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module intent-nbi {
  namespace "urn:onf:intent:intent-nbi";
  prefix intent-nbi;

  import ietf-yang-types {
    prefix "yang";
  }

  import ietf-inet-types {
    prefix "inet";
  }

  revision 2016-09-20 {
    description "Initial revision";
  }

  container intent-definitions {
    // All objects, object-groups and modifiers have a name.
    typedef name {
      type string {
        pattern "[a-fA-F][-_0-9a-fA-F]*";
        length "1..60";
      }
    }

    // Object template.
    grouping object {
      description "Object template";
      leaf object-id {
        type yang:uuid;
      }
      leaf object-name {
        type name;
      }
    }

    // Objects are defined in the Mapping Repository.
    // Objects are identified by an object id as the key and the MR holds the object definition,
    // which is a expandable choice of types (object-type) - initially only a "media-flow" (a 5-tuple)
    list objects {
          description "All object definitions";
          key "object-id";
          unique "object-name";
          uses object;
          container mapping {
              choice object-type {
                case media-flow {
                    container media-flow {
                        leaf source-ip-address {
                            type inet:ip-address;
                        }
                        leaf source-port {
                            type inet:port-number;
                        }
                        leaf destination-ip-address {
                            type inet:ip-address;
                        }
                        leaf destination-port {
                            type inet:port-number;
                        }
                        leaf protocol {
                            type uint8;
                        }
                        leaf dscp-marking {
                            type inet:dscp;
                        }
                    }
                 }
              }
          }
    }

    // Object group template.
    grouping object-group {
        description "Object-group template";
        leaf object-group-id {
            type yang:uuid;
        }
        leaf object-group-name {
            type name;
        }
    }

    // Object-groups are defined in the Intent Repository (a key-value store).
    // Object-groups are identified by an object-group id as the key and the IR holds the object-group
    // definitions which is a limited choice of objects and/or object-groups (no circular references).
    list object-groups {
        description "All object-group definitions";
        key "object-group-id";
        unique "object-group-name";
        uses object-group;

        list member-objects {
        description "The contained objects";
        key "object-id";
        unique "object-name";
        uses object;
      }
      list member-object-groups {
        description "The contained object groups";
        key "object-group-id";
        unique "object-group-name";
            uses object-group;
        }
    }

    // Modifiers have well-known names.
    grouping modifier {
        description "Standard, pre-defined modifiers";
        leaf modifier-name {
            type enumeration {
                enum "Time-Sensitive";
                enum "Best-Effort";
            }
        }
    }

    // An association pairs a set of modifiers with objects/object-groups in strict combinations.
    grouping association {
        description "An association combines modifiers, objects and object-groups";

        container modifiers {
            description "The associated modifier(s)";
            uses modifier;
        }

        // Object and object-group combinations can take one of the following forms:
        choice forms {
            // Zero, one or two objects.
            case obj {
            leaf-list objects {
                    type name;
                    max-elements 2;
                }
            }
            // Zero, one or two object groups.
            case obj-grp {
              leaf-list object-groups {
                    type name;
                    max-elements 2;
                }
            }
            // One object and one object-group.
            case mix {
              leaf object {
                    type name;
                    mandatory true;
              }
              leaf object-group {
                    type name;
                    mandatory true;
                }
            }
        }
    }

    // Associations are defined in the Intent Repository, which holds all
    // combinations of modifiers, objects and object groups. We do not give
    // associations a name, only IDs, as they are ad-hoc intent expressions.
    list associations {
        description "All associations of modifiers, objects and object-groups";
        key "association-id";
        leaf association-id {
            type yang:uuid;
        }
        uses association;
    }
  }
}
