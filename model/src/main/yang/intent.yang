module intent {
    namespace "urn:opendaylight:intent";
    prefix "intent";

    import types { prefix types; revision-date 2015-01-22; }
    import request { prefix request; revision-date 2015-01-22; }

    revision 2015-01-22 {
        description "Initial revision";
    }

    grouping end-point-group-def {
        description "An end point group (EPG) specifies 1 or more network end points.";
        leaf id {
            type types:uuid;
            mandatory true;
            description "Uniquely identifies the end point group";
        }
        leaf alias {
            type types:identifier;
            mandatory false;
            description "Human-readable name for an end point group";
        }
        leaf selector {
            type types:selector-specification;
            mandatory true;
            description "Specifies the end points that should be included in this group
                        via a query capability.";
        }
    }

    identity constraint {
        description "Base policy constraint. Used to identify and extend the name
                space of policy constraints.";
    }

    identity qos-constraint {
        description "Used to specify a QoS policy constraint.";
        base policy-constraint;
    }

    identity bandwidth-constraint {
        description "Used to specify a bandwidth policy constraint.";
        base policy-constraint;
    }

    identity availability-constraint {
        description "Used to specify a availability policy constraint.";
        base policy-constraint;
    }

    
    grouping statement-def {
        description "Defines a policy statement that includes an name, that quality
                of the policy to set, and a value for that quality. Values can
                be a literal, range, or selection set.";

        /*
         * Name is being done as a container / choice so that it can easily be extended
         * via augmentations.
         */
        leaf name {
            type identityref {
                base policy-constraint;
            }
        }

        choice value-type {
            description "A constraint value can take multiple forms as detailed below.
                        It is recommended that the value for a constraint be specified
                        in abstract form (e.g., for a bandwidth constraints the value
                        might be 'high', 'medium', or 'low' as opposed to a specifc value
                        such as 10Gbps). Specifing values in this abstract form allows
                        for the abstract value to be mapped to a specific value by policy
                        or definitions that are deployment specific, while the intent
                        constraints remain more portable.";
            case literal {
                description "Used to indicate that the value of the constraint is a single
                                acceptable value. Either this value can be met when rendering
                                the intent to the network or it cannot and the intent fails.";
                leaf value {
                    type string;
                }
            }
            case range {
                description "Used to indicate that a range of values is acceptable for the
                                constaint. Any value in the the range is acceptable and if can
                                be met the intent succeeds.";
                container lower-bound {
                    leaf value {
                        type string;
                    }
                    leaf inclusive {
                        type boolean;
                    }
                }
                container upper-bound {
                    leaf value {
                        type string;
                    }
                    leaf inclusive {
                        type boolean;
                    }
                }
            }
            case option {
                description "Used to indicate a set of values are acceptable for the constraint.
                                If any of the values can be met when rendering the intent then
                                the intent succeeds.";
                leaf-list value {
                    type string;
                }
            }
        }
    }

   

	/* 
	 * Intent
     */
		grouping intent {
			description ".";
			leaf id {
	    	  type intent-id;
	      	  mandatory true;
	      	  description "Uniquely identifies a intent.";    
	   	   	}
			leaf name {
	      	  type string;
	          description "A human-readable intent name.";	
	        }
			container subject-id {
			  leaf-list subject-id{
				  type subject-id;
				  description "Uniquely identifies the subject (what) of this intent.";
				}
			}
			leaf verb {
	      		type verb-type;
	      	  	description "A verb (action) describing what is being acomplished.";               
	    	}
		
			list preposition {
			    description "The preposition of the intent.";
				leaf-list condition-expressions {
					type condition-expression;
					mandatory true;	
					default "";
					description "The condition expression (when) for the intent.";				
				}
				leaf-list constraints-expressions {
					type operation-parameter-type;
					description "The contraints expression (how) for the intent.";			
				}
			}
		}

    container end-point-groups {
        list end-point-group {
            key id;
            unique "id alias";
            uses end-point-group-def;
        }
    }

    container policies {
        list policy {
            key id;
            unique "id alias";
            uses policy-def;
        }
    }

    /*
     * Extend the request type name space for intents
     */
    identity add-intent {
        base request:request-type;
    }

    augment /request:requests/request:request {
        when "request-type = add-intent";
        uses intent;
    }

    /*
     * Sample way to extend the name space of the policy statements
     */
    identity my-constraint {
        base policy-constraint;
    }
}
